services:
  orchestrator:
    build:
      context: . 
      dockerfile: Dockerfile
    image: ${ORCHESTRATOR_IMAGE}
    command: npm start
    working_dir: /usr/src/app/backend
    ports:
      - "${ORCHESTRATOR_EXTERNAL_PORT}:3000"
    volumes:
      - ./backend:/usr/src/app/backend
      - ./nexusmind-web-ui:/usr/src/app/nexusmind-web-ui
      - node_modules:/usr/src/app/backend/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  agent-research:
    build:
      context: ./agents/research
      dockerfile: Dockerfile
    image: ${AGENT_IMAGE_RESEARCH}
    environment:
      - ORCHESTRATOR_URL=ws://orchestrator:3000
    depends_on:
      orchestrator:
        condition: service_healthy

  agent-comms:
    build:
      context: ./agents/comms
      dockerfile: Dockerfile
    image: ${AGENT_IMAGE_COMMS}
    environment:
      - ORCHESTRATOR_URL=ws://orchestrator:3000
    depends_on:
      orchestrator:
        condition: service_healthy

  agent-ops-execution:
    build:
      context: ./agents/ops-execution
      dockerfile: Dockerfile
    image: ${AGENT_IMAGE_OPS}
    environment:
      - ORCHESTRATOR_URL=ws://orchestrator:3000
    depends_on:
      orchestrator:
        condition: service_healthy

  agent-strategy:
    build:
      context: ./agents/strategy
      dockerfile: Dockerfile
    image: ${AGENT_IMAGE_STRATEGY}
    environment:
      - ORCHESTRATOR_URL=ws://orchestrator:3000
    depends_on:
      orchestrator:
        condition: service_healthy

  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis-data:/data

volumes:
  node_modules:
  postgres-data:
  redis-data:

