name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # This job runs on every push and pull request to the main branch
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        # Using 'npm ci' is recommended for CI environments as it's faster and more reliable
        run: npm ci
        working-directory: ./backend

      - name: Run linter
        # This step assumes you have a linting script in your package.json
        # e.g., "lint": "eslint ."
        run: npm run lint
        working-directory: ./backend

      - name: Run tests
        # This step assumes you have a test script in your package.json
        # e.g., "test": "jest"
        run: npm test
        working-directory: ./backend

  # This job only runs on pushes to the main branch and after build-and-test is successful
  deploy:
    name: Deploy to Server
    needs: build-and-test # This ensures that deployment only happens if the build and tests pass
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' # Only run on push to main
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: tssprotx/nexus-orchestrator:${{ github.sha }},tssprotx/nexus-orchestrator:latest

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DO_SSH_HOST }}
          username: ${{ secrets.DO_SSH_USER }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
            # Define image name and container name
            IMAGE_NAME=tssprotx/nexus-orchestrator:latest
            CONTAINER_NAME=nexus-app

            # Log in to Docker Hub on the server
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # Pull the latest image
            docker pull $IMAGE_NAME

            # Stop and remove the old container if it exists
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            # Run the new container
            docker run -d \
              -p 80:3000 \
              --name $CONTAINER_NAME \
              --restart always \
              $IMAGE_NAME

            # Clean up old, unused Docker images
            docker image prune -af
